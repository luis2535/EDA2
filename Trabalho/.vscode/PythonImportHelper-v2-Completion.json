[
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "generalPath",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "generalPath = \"C:\\\\Users\\\\bruni\\\\OneDrive\\\\Documentos\\\\GitHub\\\\EDA2001\\\\Trabalho\\\\\"\n# (2) Gráfico do caso médio da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceAverageCase.txt\", 'r') as f:\n    lines = f.readlines()\naverageVectorRB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVectorRB[j] += float(vector[j])/10\nxpointsAverageRB = np.array([x for x in range(0, len(averageVectorRB))])",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "averageVectorRB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "averageVectorRB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVectorRB[j] += float(vector[j])/10\nxpointsAverageRB = np.array([x for x in range(0, len(averageVectorRB))])\nypointsAverageRB = np.array(averageVectorRB)\nplt.xticks(range(0, len(xpointsAverageRB)+1, 100))\nplt.plot(xpointsAverageRB, ypointsAverageRB, label=\"Average (Red-Black)\", linewidth=0.6)\nf.close()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xpointsAverageRB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xpointsAverageRB = np.array([x for x in range(0, len(averageVectorRB))])\nypointsAverageRB = np.array(averageVectorRB)\nplt.xticks(range(0, len(xpointsAverageRB)+1, 100))\nplt.plot(xpointsAverageRB, ypointsAverageRB, label=\"Average (Red-Black)\", linewidth=0.6)\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVectorRB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "ypointsAverageRB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "ypointsAverageRB = np.array(averageVectorRB)\nplt.xticks(range(0, len(xpointsAverageRB)+1, 100))\nplt.plot(xpointsAverageRB, ypointsAverageRB, label=\"Average (Red-Black)\", linewidth=0.6)\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVectorRB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "worstVectorRB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "worstVectorRB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVectorRB[j] = float(vector[j])\nxpointsWorstRB = np.array([x for x in range(0, len(worstVectorRB))])\nypointsWorstRB = np.array(worstVectorRB)\nplt.plot(xpointsWorstRB, ypointsWorstRB, label=\"Worst (Red-Black)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xpointsWorstRB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xpointsWorstRB = np.array([x for x in range(0, len(worstVectorRB))])\nypointsWorstRB = np.array(worstVectorRB)\nplt.plot(xpointsWorstRB, ypointsWorstRB, label=\"Worst (Red-Black)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\RedBlackTree.png\")\nplt.close()\nf.close()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "ypointsWorstRB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "ypointsWorstRB = np.array(worstVectorRB)\nplt.plot(xpointsWorstRB, ypointsWorstRB, label=\"Worst (Red-Black)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\RedBlackTree.png\")\nplt.close()\nf.close()\n# (4) Gráfico do caso médio da árvore AVL:",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "averageVectorAVL",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "averageVectorAVL = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVectorAVL[j] += float(vector[j])/10\nxpointsAverageAVL = np.array([x for x in range(0, len(averageVectorAVL))])\nypointsAverageAVL = np.array(averageVectorAVL)\nplt.plot(xpointsAverageAVL, ypointsAverageAVL, label=\"Average (AVL)\", linewidth=0.6)\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xpointsAverageAVL",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xpointsAverageAVL = np.array([x for x in range(0, len(averageVectorAVL))])\nypointsAverageAVL = np.array(averageVectorAVL)\nplt.plot(xpointsAverageAVL, ypointsAverageAVL, label=\"Average (AVL)\", linewidth=0.6)\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVectorAVL = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "ypointsAverageAVL",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "ypointsAverageAVL = np.array(averageVectorAVL)\nplt.plot(xpointsAverageAVL, ypointsAverageAVL, label=\"Average (AVL)\", linewidth=0.6)\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVectorAVL = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "worstVectorAVL",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "worstVectorAVL = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVectorAVL[j] = float(vector[j])\nxpointsWorstAVL = np.array([x for x in range(0, len(worstVectorAVL))])\nypointsWorstAVL = np.array(worstVectorAVL)\nplt.plot(xpointsWorstAVL, ypointsWorstAVL, label=\"Worst (AVL)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xpointsWorstAVL",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xpointsWorstAVL = np.array([x for x in range(0, len(worstVectorAVL))])\nypointsWorstAVL = np.array(worstVectorAVL)\nplt.plot(xpointsWorstAVL, ypointsWorstAVL, label=\"Worst (AVL)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\AVLTree.png\")\nplt.close()\nf.close()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "ypointsWorstAVL",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "ypointsWorstAVL = np.array(worstVectorAVL)\nplt.plot(xpointsWorstAVL, ypointsWorstAVL, label=\"Worst (AVL)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\AVLTree.png\")\nplt.close()\nf.close()\n# (6) Gráfico do caso médio da árvore B:",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "averageVectorB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "averageVectorB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVectorB[j] = float(vector[j])\nxpointsAverageB = np.array([x for x in range(0, len(averageVectorB))])\nypointsAverageB = np.array(averageVectorB)\nplt.plot(xpointsAverageB, ypointsAverageB, label=\"Average (B)\", linewidth=0.6)\nf.close()\n# (7) Gráfico do pior caso da árvore B:",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xpointsAverageB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xpointsAverageB = np.array([x for x in range(0, len(averageVectorB))])\nypointsAverageB = np.array(averageVectorB)\nplt.plot(xpointsAverageB, ypointsAverageB, label=\"Average (B)\", linewidth=0.6)\nf.close()\n# (7) Gráfico do pior caso da árvore B:\nwith open(generalPath + \"BTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVectorB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "ypointsAverageB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "ypointsAverageB = np.array(averageVectorB)\nplt.plot(xpointsAverageB, ypointsAverageB, label=\"Average (B)\", linewidth=0.6)\nf.close()\n# (7) Gráfico do pior caso da árvore B:\nwith open(generalPath + \"BTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVectorB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "worstVectorB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "worstVectorB = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVectorB[j] = float(vector[j])\nxpointsWorstB = np.array([x for x in range(0, len(worstVectorB))])\nypointsWorstB = np.array(worstVectorB)\nplt.plot(xpointsWorstB, ypointsWorstB, label=\"Worst (B)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xpointsWorstB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xpointsWorstB = np.array([x for x in range(0, len(worstVectorB))])\nypointsWorstB = np.array(worstVectorB)\nplt.plot(xpointsWorstB, ypointsWorstB, label=\"Worst (B)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\BTree.png\")\nplt.close()\nf.close()",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "ypointsWorstB",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "ypointsWorstB = np.array(worstVectorB)\nplt.plot(xpointsWorstB, ypointsWorstB, label=\"Worst (B)\", linewidth=0.6)\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\BTree.png\")\nplt.close()\nf.close()\n# (8) Plotando todos os gráficos em um só:",
        "detail": "PlotResults",
        "documentation": {}
    },
    {
        "label": "xAxis",
        "kind": 5,
        "importPath": "PlotResults",
        "description": "PlotResults",
        "peekOfCode": "xAxis = np.linspace(1, len(worstVectorB))\nplt.plot(xAxis, np.log2(xAxis), label=\"log(n) em base 2\", linewidth=0.6)\nplt.plot(xpointsAverageRB, ypointsAverageRB, label=\"Average (RB)\", linewidth=0.6)\nplt.plot(xpointsAverageAVL, ypointsAverageAVL, label=\"Average (AVL)\", linewidth=0.6)\nplt.plot(xpointsAverageB, ypointsAverageB, label=\"Average (B)\", linewidth=0.6)\n#plt.plot(xpointsWorstRB, ypointsWorstRB, label=\"Worst (RB)\")\n#plt.plot(xpointsWorstAVL, ypointsWorstAVL, label=\"Worst (AVL)\")\n#plt.plot(xpointsWorstB, ypointsWorstB, label=\"Worst (B)\")\n#plt.style.use(\"seaborn\")\nplt.title(\"Average Cases vs log(n)\")",
        "detail": "PlotResults",
        "documentation": {}
    }
]